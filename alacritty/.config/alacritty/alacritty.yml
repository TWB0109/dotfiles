# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  #TERM: alacritty
  TERM: xterm-256color

# Window Configuration
window:
  padding:
    x: 10
    y: 10
  dynamic_padding: false

  dimensions:
    columns: 100
    lines: 39

  decorations: None
  title: Alacritty
  startup_mode: Windowed

  opacity: 1.0

# Scrolling configuration
scrolling:
  history: 10000
  multiplier: 3

# Font configuration
font:
  normal:
    family: Sauce Code Pro Nerd Font Mono
    style: Regular
  bold:
    family: Sauce Code Pro Nerd Font Mono
    style: Bold
  italic:
    family: Hack
    style: Italic
  use_thin_strokes: true
  size: 10

# Live config reload (changes require restart)
live_config_reload: true

mouse_bindings:
- {mouse: Middle, action: PasteSelection}

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: {threshold: 300}
  triple_click: {threshold: 300}

  # If this is `true`, the cursor is temporarily hidden when typing.
  hide_when_typing: true

  hints:
    launcher:
      program: xdg-open
      args: []

    # URL modifiers
    #
    # These are the modifiers that need to be held down for opening URLs when clicking
    # on them. The available modifiers are documented in the key binding section.
    #modifiers: None

# Colors
schemes:
  gruvbox_light: &light
    primary:
      # hard contrast: background = '#f9f5d7'
      background: '#f2e5bc'
      # soft contrast: background = '#f2e5bc'
      foreground: '#3c3836'

    # Normal colors
    normal:
      black:   '#fbf1c7'
      red:     '#cc241d'
      green:   '#98971a'
      yellow:  '#d79921'
      blue:    '#458588'
      magenta: '#b16286'
      cyan:    '#689d6a'
      white:   '#7c6f64'

    # Bright colors
    bright:
      black:   '#928374'
      red:     '#9d0006'
      green:   '#79740e'
      yellow:  '#b57614'
      blue:    '#076678'
      magenta: '#8f3f71'
      cyan:    '#427b58'
      white:   '#3c3836'

  gruvbox_dark: &dark
    primary:
      # hard contrast background - '#1d2021'
      background:        &gruvbox_dark_bg '#282828'
      # soft contrast background - '#32302f'
      foreground:        '#ebdbb2'
      bright_foreground: '#fbf1c7'
      dim_foreground:    '#a89984'
    cursor:
      text:   CellBackground
      cursor: CellForeground
    vi_mode_cursor:
      text:   CellBackground
      cursor: CellForeground
    selection:
      text:       CellBackground
      background: CellForeground
    bright:
      black:   '#928374'
      red:     '#fb4934'
      green:   '#b8bb26'
      yellow:  '#fabd2f'
      blue:    '#83a598'
      magenta: '#d3869b'
      cyan:    '#8ec07c'
      white:   '#ebdbb2'
    normal:
      black:   *gruvbox_dark_bg
      red:     '#cc241d'
      green:   '#98971a'
      yellow:  '#d79921'
      blue:    '#458588'
      magenta: '#b16286'
      cyan:    '#689d6a'
      white:   '#a89984'
    dim:
      black:   '#32302f'
      red:     '#9d0006'
      green:   '#79740e'
      yellow:  '#b57614'
      blue:    '#076678'
      magenta: '#8f3f71'
      cyan:    '#427b58'
      white:   '#928374'
    indexed_colors:
      - { index:  66, color: '#458588' }
      - { index:  72, color: '#689d6a' }
      - { index: 106, color: '#98971a' }
      - { index: 108, color: '#8ec07c' }
      - { index: 109, color: '#83a598' }
      - { index: 124, color: '#cc241d' }
      - { index: 132, color: '#b16286' }
      - { index: 142, color: '#b8bb26' }
      - { index: 166, color: '#d65d0e' }
      - { index: 167, color: '#fb4934' }
      - { index: 172, color: '#d79921' }
      - { index: 175, color: '#d3869b' }
      - { index: 208, color: '#fe8019' }
      - { index: 214, color: '#fabd2f' }
      - { index: 223, color: '#ebdbb2' }
      - { index: 229, color: '#fbf1c7' }
      - { index: 234, color: '#1d2021' }
      - { index: 235, color: '#282828' }
      - { index: 236, color: '#32302f' }
      - { index: 237, color: '#3c3836' }
      - { index: 239, color: '#504945' }
      - { index: 241, color: '#665c54' }
      - { index: 243, color: '#7c6f64' }
      - { index: 245, color: '#928374' }
      - { index: 246, color: '#a89984' }
      - { index: 248, color: '#bdae93' }
      - { index: 250, color: '#d5c4a1' }

colors: *light

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - Copy
#   - Paste
#   - PasteSelection
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Minimize
#   - Quit
#   - ToggleFullscreen
#   - SpawnNewInstance
#   - ClearLogNotice
#   - ReceiveChar
#   - None
#
#   (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Alt
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
#key_bindings:
  # (Windows, Linux, and BSD only)
  #- { key: V,        mods: Control|Shift, action: Paste            }
  #- { key: C,        mods: Control|Shift, action: Copy             }
  #- { key: Insert,   mods: Shift,         action: PasteSelection   }
  #- { key: Key0,     mods: Control,       action: ResetFontSize    }
  #- { key: Equals,   mods: Control,       action: IncreaseFontSize }
  #- { key: Add,      mods: Control,       action: IncreaseFontSize }
  #- { key: Subtract, mods: Control,       action: DecreaseFontSize }
  #- { key: Minus,    mods: Control,       action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false
